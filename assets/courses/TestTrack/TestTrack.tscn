[gd_scene load_steps=9 format=2]

[ext_resource path="res://addons/zylann.hterrain/hterrain.gd" type="Script" id=1]
[ext_resource path="res://addons/zylann.hterrain/hterrain_texture_set.gd" type="Script" id=2]
[ext_resource path="res://assets/courses/TestTrack/TerrainData/data.hterrain" type="Resource" id=3]

[sub_resource type="GDScript" id=6]

[sub_resource type="ProceduralSky" id=7]
sun_color = Color( 0.972549, 0.956863, 0.92549, 1 )
sun_latitude = 31.87
sun_longitude = 34.43
sun_angle_min = 0.0
sun_energy = 2.0
script = SubResource( 6 )

[sub_resource type="Environment" id=8]
background_mode = 2
background_sky = SubResource( 7 )
ambient_light_sky_contribution = 0.1
fog_enabled = true
auto_exposure_enabled = true
ssao_enabled = true

[sub_resource type="Shader" id=5]
code = "shader_type spatial;

// This is a very simple shader for a low-poly coloured visual, without textures

uniform sampler2D u_terrain_heightmap;
uniform sampler2D u_terrain_normalmap;
// I had to remove `hint_albedo` from colormap because it makes sRGB conversion kick in,
// which snowballs to black when doing GPU painting on that texture...
uniform sampler2D u_terrain_colormap;// : hint_albedo;
uniform mat4 u_terrain_inverse_transform;
uniform mat3 u_terrain_normal_basis;

varying flat vec4 v_tint;


vec3 unpack_normal(vec4 rgba) {
	vec3 n = rgba.xzy * 2.0 - vec3(1.0);
	// Had to negate Z because it comes from Y in the normal map,
	// and OpenGL-style normal maps are Y-up.
	n.z *= -1.0;
	return n;
}

void vertex() {
	vec2 cell_coords = (u_terrain_inverse_transform * WORLD_MATRIX * vec4(VERTEX, 1)).xz;
	// Must add a half-offset so that we sample the center of pixels,
	// otherwise bilinear filtering of the textures will give us mixed results (#183)
	cell_coords += vec2(0.5);

	// Normalized UV
	UV = cell_coords / vec2(textureSize(u_terrain_heightmap, 0));
	
	// Height displacement
	float h = texture(u_terrain_heightmap, UV).r;
	VERTEX.y = h;
	
	// Putting this in vertex saves 2 fetches from the fragment shader,
	// which is good for performance at a negligible quality cost,
	// provided that geometry is a regular grid that decimates with LOD.
	// (downside is LOD will also decimate tint and splat, but it's not bad overall)
	v_tint = texture(u_terrain_colormap, UV);
	
	// Need to use u_terrain_normal_basis to handle scaling.
	NORMAL = u_terrain_normal_basis * unpack_normal(texture(u_terrain_normalmap, UV));
}

void fragment() {
	if (v_tint.a < 0.5) {
		// TODO Add option to use vertex discarding instead, using NaNs
		discard;
	}
	
	vec3 terrain_normal_world = 
		u_terrain_normal_basis * unpack_normal(texture(u_terrain_normalmap, UV));
	terrain_normal_world = normalize(terrain_normal_world);
	
	ALBEDO = v_tint.rgb;
	ROUGHNESS = 1.0;
	NORMAL = normalize(cross(dFdx(VERTEX), dFdy(VERTEX)));
}

"

[sub_resource type="Resource" id=3]
script = ExtResource( 2 )
mode = 0
textures = [ [  ], [  ] ]

[node name="Spatial" type="Spatial"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 8 )

[node name="DirectionalLight" type="DirectionalLight" parent="WorldEnvironment"]
transform = Transform( 0.21493, 0.882813, 0.417668, 0.658569, -0.446811, 0.605514, 0.721174, 0.14492, -0.677426, 0, 28.6704, 0 )
light_color = Color( 0.988235, 0.984314, 0.945098, 1 )
shadow_enabled = true
shadow_contact = 5.321

[node name="HTerrain" type="Spatial" parent="."]
script = ExtResource( 1 )
lod_scale = 2.0
centered = true
_terrain_data = ExtResource( 3 )
chunk_size = 64
collision_enabled = true
collision_layer = 1
collision_mask = 1
shader_type = "LowPoly"
custom_shader = SubResource( 5 )
custom_globalmap_shader = null
texture_set = SubResource( 3 )
render_layers = 1

[node name="Ramped Wall" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 94.2551, -18.8879, 18.5868 )

[node name="CSGCombiner" type="CSGCombiner" parent="Ramped Wall"]
operation = 2
use_collision = true

[node name="CSGBox2" type="CSGBox" parent="Ramped Wall/CSGCombiner"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -5, 6, 0 )
width = 10.0
height = 10.0
depth = 40.0

[node name="CSGCylinder" type="CSGCylinder" parent="Ramped Wall/CSGCombiner"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, -10, 11, 0 )
operation = 2
radius = 10.0
height = 40.0
sides = 32

[node name="CSGBox" type="CSGBox" parent="Ramped Wall/CSGCombiner"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 10, 0 )
snap = 1.0
use_collision = true
width = 1.0
height = 20.0
depth = 40.0
